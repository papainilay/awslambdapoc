plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.2'
  id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.poc' // Replace with your actual group ID
version = '1.0-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  maven { url 'https://repo.spring.io/milestone' } // For milestone releases
  maven { url 'https://repo.spring.io/snapshot' }  // For snapshot releases
}

dependencies {
  // AWS Serverless Java Container for Spring Boot 3
  implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.1.2'

  // Spring Boot Starter Web with Tomcat excluded
  implementation('org.springframework.boot:spring-boot-starter-web') {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  }

  // AWS Lambda Core and Events
  implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
  implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'

  // Lombok
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  // Database dependencies (H2 and JPA)
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  runtimeOnly 'com.h2database:h2' // For in-memory database
  // runtimeOnly 'com.mysql:mysql-connector-j' // Uncomment if using MySQL

  // Testing dependencies
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'com.amazonaws.serverless:aws-serverless-java-container-core:2.1.2:tests'
  testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.4.2'
  testImplementation platform('org.junit:junit-bom:5.11.4')
  testImplementation 'org.junit.jupiter:junit-jupiter'
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.boot:spring-boot-dependencies:3.4.2' // Manages versions of dependencies
  }
}

tasks.named('bootJar') {
  enabled = false // Disable the default Spring Boot JAR
}

tasks.named('jar') {
  archiveBaseName.set('application') // Sets the base name of the JAR
}

task buildZip(type: Zip) {
  dependsOn build

  // Include compiled classes
  from('build/classes/java/main') {
    into '/' // Place classes at the root
  }

  // Include resource files
  from('build/resources/main') {
    into '/' // Place resources at the root
  }

  // Include runtime dependencies in the lib directory
  into('lib') {
    from(configurations.runtimeClasspath) {
      exclude 'spring-boot-starter-tomcat*'
      exclude 'tomcat-embed-*'
    }
  }

  // Set the name and destination of the zip file
  archiveFileName.set('application.zip')
  destinationDirectory.set(file("$buildDir/distributions"))
}

tasks.build {
  dependsOn buildZip // Ensure buildZip runs during build
}

tasks.named('test') {
  useJUnitPlatform()
}
